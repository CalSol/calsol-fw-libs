# Various utilities for integrating with git in SCons build scripts.
#
# Usage:
#   SConscript('calsol-fw-libs/SConscript-git-tuils', exports='env')
#
#   # Check that all submodules are up to date
#   env.CheckSubmoduleVersion()
#
#   # Append a C define containing the current git version
#   gitversion = warnings.warn("Unable to get description of current Git HEAD, GITVERSION defaults to 'unknown'")
#   if gitversion is not None:
#     env.Append(CPPDEFINES={'GITVERSION': gitversion})
#   else:
#     warnings.warn("Unable to get description of current Git HEAD, GITVERSION defaults to 'unknown'")
#     env.Append(CPPDEFINES={'GITVERSION': 'unknown'})
#
# All git commands are invoked in the current env directory, which should
# (probably) be your repository root directory.
#
# Remember that you need to check for the existence of this repository, otherwise invoking this
# SConscript will only give a warning, but not fail. Example:
#   if not os.path.isfile(File('calsol-fw-libs/SConscript-git-utils').abspath):
#     raise SCons.Errors.UserError(
#       "Missing calsol-fw-libs/SConscript-git-utils, this probably means that the submodule calsol-fw-libs is not initialized. " +
#       "Run 'git submodule update --init --recursive' to initialize.")

from subprocess import Popen, PIPE
import warnings, SCons.Errors

Import('env')

AddOption(
  '--submodule',
  type='string',
  nargs=1,
  action='store',
  help='Use --submodule=warn to not prevent building on out-of-sync submodules (only useful if developing on a submodule). Use --submodule=ignore to not check submodules (only useful if the check is crashing).'
)

def check_submodule_version(env):
  submodule_errors = []

  if GetOption('submodule') != 'ignore':
    cmd = ['git', 'submodule', 'status']
    try:
      p = Popen(cmd, cwd=env.Dir('.').abspath, stdout=PIPE)
    except Exception as e:
      errstr = "Unable to check submodule status, command %s failed with exception: \n  %s: %s" % (cmd, e.__class__.__name__, e)
      errstr += "\nCheck that git is installed and on your system PATH."
      raise SCons.Errors.UserError(errstr)
      return None

    out, _ = p.communicate()
    if p.returncode == 0:
      for status in out.decode().splitlines():
        prefix = status[0]
        if prefix != ' ':
          status = status[1:]
          name = status.split(' ')[1]
          if (prefix == '-'):
            submodule_errors.append("\n- Submodule '%s' is not initialized, run 'git submodule update --init --recursive' to initialize." % name)
          elif (prefix == '+'):
            submodule_errors.append("\n- Submodule '%s' is out of date, run 'git submodule update --recursive' to update." % name)
          else:
            submodule_errors.append("\n- Internal error: submodule '%s' has unknown status '%s'." % (name, prefix))
    else:
      raise SCons.Errors.UserError("Unable to check submodule status, command %s had nonzero reutrn %s." % (cmd, p.returncode))

  if submodule_errors:
    errstr = ''.join(submodule_errors)
    if GetOption('submodule') == 'warn':
      errstr = "Submodules are out of date:" + errstr + "\nContinuing build (user override)."
      warnings.warn(errstr)
    else:
      errstr = "Submodules are out of date:" + errstr + "\nStopping build. If this is intentional, re-run with '--submodule=warn' to bypass this warning."
      raise SCons.Errors.UserError(errstr)
env.AddMethod(check_submodule_version, "CheckSubmoduleVersion")

def get_git_version(env):
  cmd = ['git', 'describe', '--tags', '--always', '--long', '--dirty']
  try:
    p = Popen(cmd, cwd=env.Dir('.').abspath, stdout=PIPE)
  except Exception as e:
    warnings.warn("Unable to get repository commit, command %s failed with exception %s: %s. "  % (cmd, e.__class__.__name__, e) +
    "Check that git is installed and on your system PATH.")
    return None
  out, _ = p.communicate()

  if p.returncode == 0:
    return out.decode().strip()
  else:
    warnings.warn("Unable to get repository commit, command %s had nonzero return %s." % (cmd, p.returncode))
    return None
env.AddMethod(get_git_version, "GetGitVersion")
